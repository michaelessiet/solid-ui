{
  "name": "charts",
  "dependencies": [
    "chart.js"
  ],
  "files": [
    {
      "name": "charts.tsx",
      "content": "import type { Component, ComponentProps } from \"solid-js\"\r\nimport { mergeProps, onMount, createEffect, on, onCleanup, splitProps } from \"solid-js\"\r\n\r\nimport type {\r\n  ChartComponent,\r\n  ChartData,\r\n  ChartItem,\r\n  ChartOptions,\r\n  ChartType,\r\n  ChartTypeRegistry,\r\n  Plugin,\r\n  TooltipModel\r\n} from \"chart.js\"\r\nimport {\r\n  ArcElement,\r\n  BarController,\r\n  BarElement,\r\n  BubbleController,\r\n  CategoryScale,\r\n  Chart,\r\n  Colors,\r\n  DoughnutController,\r\n  Filler,\r\n  Legend,\r\n  LineController,\r\n  LineElement,\r\n  LinearScale,\r\n  PieController,\r\n  PointElement,\r\n  PolarAreaController,\r\n  RadarController,\r\n  RadialLinearScale,\r\n  ScatterController,\r\n  Tooltip\r\n} from \"chart.js\"\r\n\r\nimport { cn } from \"~/lib/utils\"\r\n\r\nexport interface TypedChartProps extends ComponentProps<\"div\"> {\r\n  data: ChartData\r\n  options?: ChartOptions\r\n  plugins?: Plugin[]\r\n}\r\n\r\nexport interface ChartProps extends TypedChartProps {\r\n  type: ChartType\r\n}\r\n\r\nexport interface ChartContext {\r\n  chart: Chart\r\n  tooltip: TooltipModel<keyof ChartTypeRegistry>\r\n}\r\n\r\nconst registerMap: { [key in ChartType]: ChartComponent[] } = {\r\n  bar: [BarController, BarElement, CategoryScale, LinearScale],\r\n  bubble: [BubbleController, PointElement, LinearScale],\r\n  doughnut: [DoughnutController, ArcElement],\r\n  line: [LineController, LineElement, PointElement, CategoryScale, LinearScale],\r\n  pie: [PieController, ArcElement],\r\n  polarArea: [PolarAreaController, ArcElement, RadialLinearScale],\r\n  radar: [RadarController, LineElement, PointElement, RadialLinearScale],\r\n  scatter: [ScatterController, PointElement, LinearScale]\r\n}\r\n\r\nconst BaseChart: Component<ChartProps> = (rawProps) => {\r\n  Chart.register(Colors, Filler, Legend, Tooltip, ...registerMap[rawProps.type])\r\n\r\n  const props = mergeProps(\r\n    {\r\n      options: { responsive: true, maintainAspectRatio: false } as ChartOptions,\r\n      plugins: [] as Plugin[]\r\n    },\r\n    rawProps\r\n  )\r\n  const [, rest] = splitProps(props, [\"class\", \"type\", \"data\", \"options\", \"plugins\"])\r\n\r\n  let ref: HTMLCanvasElement\r\n  let chart: Chart\r\n\r\n  const init = () => {\r\n    const ctx = ref!.getContext(\"2d\") as ChartItem\r\n    chart = new Chart(ctx, {\r\n      type: props.type,\r\n      data: props.data,\r\n      options: props.options,\r\n      plugins: props.plugins\r\n    })\r\n  }\r\n\r\n  onMount(() => init())\r\n\r\n  createEffect(\r\n    on(\r\n      () => props.data,\r\n      () => {\r\n        chart.data = props.data\r\n        chart.update()\r\n      },\r\n      { defer: true }\r\n    )\r\n  )\r\n\r\n  onCleanup(() => chart?.destroy())\r\n\r\n  return (\r\n    <div class={cn(\"max-w-full\", props.class)} {...rest}>\r\n      <canvas ref={ref!} />\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction showTooltip(context: ChartContext) {\r\n  let el = document.getElementById(\"chartjs-tooltip\")\r\n  if (!el) {\r\n    el = document.createElement(\"div\")\r\n    el.id = \"chartjs-tooltip\"\r\n    document.body.appendChild(el)\r\n  }\r\n\r\n  const model = context.tooltip\r\n  if (model.opacity === 0 || !model.body) {\r\n    el.style.opacity = \"0\"\r\n    return\r\n  }\r\n\r\n  el.className = `p-2 bg-card text-card-foreground rounded-lg border shadow-sm text-sm ${\r\n    model.yAlign ?? `no-transform`\r\n  }`\r\n\r\n  let content = \"\"\r\n\r\n  model.title.forEach((title) => {\r\n    content += `<h3 class=\"font-semibold leading-none tracking-tight\">${title}</h3>`\r\n  })\r\n\r\n  content += `<div class=\"mt-1 text-muted-foreground\">`\r\n  const body = model.body.flatMap((body) => body.lines)\r\n  body.forEach((line, i) => {\r\n    const colors = model.labelColors[i]\r\n    content += `\r\n        <div class=\"flex items-center\">\r\n          <span class=\"inline-block h-2 w-2 mr-1 rounded-full border\" style=\"background: ${colors.backgroundColor}; border-color: ${colors.borderColor}\"></span>\r\n          ${line}\r\n        </div>`\r\n  })\r\n  content += `</div>`\r\n\r\n  el.innerHTML = content\r\n\r\n  const pos = context.chart.canvas.getBoundingClientRect()\r\n  el.style.opacity = \"1\"\r\n  el.style.position = \"absolute\"\r\n  el.style.left = `${pos.left + window.scrollX + model.caretX}px`\r\n  el.style.top = `${pos.top + window.scrollY + model.caretY}px`\r\n  el.style.pointerEvents = \"none\"\r\n}\r\n\r\nfunction createTypedChart(type: ChartType): Component<TypedChartProps> {\r\n  const chartsWithScales: ChartType[] = [\"bar\", \"line\", \"scatter\"]\r\n  const chartsWithLegends: ChartType[] = [\"bar\", \"line\"]\r\n\r\n  const options: ChartOptions = {\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: chartsWithScales.includes(type)\r\n      ? {\r\n          x: {\r\n            border: { display: false },\r\n            grid: { display: false }\r\n          },\r\n          y: {\r\n            border: {\r\n              dash: [3],\r\n              dashOffset: 3,\r\n              display: false\r\n            },\r\n            grid: {\r\n              color: \"hsla(240, 3.8%, 46.1%, 0.4)\"\r\n            }\r\n          }\r\n        }\r\n      : {},\r\n    plugins: {\r\n      legend: chartsWithLegends.includes(type)\r\n        ? {\r\n            display: true,\r\n            align: \"end\",\r\n            labels: {\r\n              usePointStyle: true,\r\n              boxWidth: 6,\r\n              boxHeight: 6,\r\n              color: \"hsl(240, 3.8%, 46.1%)\",\r\n              font: { size: 14 }\r\n            }\r\n          }\r\n        : { display: false },\r\n      tooltip: {\r\n        enabled: false,\r\n        external: (context) => showTooltip(context)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (props) => <BaseChart type={type} options={options} {...props} />\r\n}\r\n\r\nconst BarChart = createTypedChart(\"bar\")\r\nconst BubbleChart = createTypedChart(\"bubble\")\r\nconst DonutChart = createTypedChart(\"doughnut\")\r\nconst LineChart = createTypedChart(\"line\")\r\nconst PieChart = createTypedChart(\"pie\")\r\nconst PolarAreaChart = createTypedChart(\"polarArea\")\r\nconst RadarChart = createTypedChart(\"radar\")\r\nconst ScatterChart = createTypedChart(\"scatter\")\r\n\r\nexport {\r\n  BaseChart as Chart,\r\n  BarChart,\r\n  BubbleChart,\r\n  DonutChart,\r\n  LineChart,\r\n  PieChart,\r\n  PolarAreaChart,\r\n  RadarChart,\r\n  ScatterChart\r\n}\r\n"
    }
  ],
  "type": "ui"
}